{"version":3,"file":"cart.js","mappings":"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","sources":["webpack://kanap/./src/app/config.mjs","webpack://kanap/./src/utility/makeElement.mjs","webpack://kanap/./src/utility/modal.mjs","webpack://kanap/./src/app/LocalStorageInterface.mjs","webpack://kanap/./src/app/CartItem.mjs","webpack://kanap/./src/app/Product.mjs","webpack://kanap/./src/app/Cart.js","webpack://kanap/./src/app/apiInterface.mjs","webpack://kanap/./src/app/Contact.mjs","webpack://kanap/./src/cart.js","webpack://kanap/./src/utility/utility.mjs"],"sourcesContent":["/* Configuration Data */\r\n/**\r\n * @Object \r\n * @name CONFIG\r\n * @Description Sets de main parameters for all the website.\r\n */\r\n\r\n export const CONFIG = {\r\n\r\n    API_URL: \"http://localhost:3000/api/products/\",\r\n\r\n    PATH_NAME_COMMAND: \"/front/html/confirmation.html\",\r\n\r\n    PATH_PRODUCT: \"./product.html?id=\",\r\n\r\n    LOCAL_CART: \"Kanap\"\r\n\r\n  };\r\n  ","/**\r\n * @function \r\n * @name makeElement\r\n * @description create un HTMLElement with a given template.\r\n * @param { Array.< String, ?Object, ?Array } template The object Template.\r\n * @example ['a', {href: 'http:google.es', content: 'google'},\r\n *              ['p',{content: \"mi parrafo\"}, ['span', {content: 'my child'}]]\r\n *          ]\r\n * @param { HTMLElement } container The container where we append the element.\r\n * @returns { HTMLElement } The new element created with the given template.\r\n */\r\n\r\n export function makeElement ( template, container ) {\r\n\r\n  let myElementCreated = container;\r\n\r\n  // If the third element of the array is only one array, then add [] because the third element is really an array of \r\n  // possible childs.\r\n  // Example: {'p', null, ['span']} => {'p', null, [['span']]}\r\n\r\n  if ( typeof template[ 0 ] === \"string\" ) {\r\n\r\n    template = [ template ];\r\n\r\n  }\r\n\r\n  let domElement;\r\n\r\n  template.forEach( ( el ) => {\r\n\r\n    if ( typeof el[ 0 ] === \"string\") {\r\n\r\n      domElement = document.createElement( el[ 0 ] );\r\n\r\n      if ( myElementCreated ) {\r\n\r\n        myElementCreated.appendChild( domElement );\r\n      \r\n      } else {\r\n\r\n        myElementCreated = domElement;\r\n\r\n      }\r\n\r\n    }\r\n\r\n    if ( typeof el[ 1 ] == \"object\" ) {\r\n\r\n      for (let prop in el[ 1 ]) {\r\n  \r\n        switch ( prop ) {\r\n\r\n          case \"class\":\r\n\r\n            let myListClass = el[ 1 ].class;\r\n\r\n            if ( Array.isArray( el[ 1 ].class ) ) {\r\n\r\n              myListClass = el[ 1 ].class.join(\",\");\r\n\r\n            }\r\n\r\n            domElement.classList.add( myListClass );\r\n\r\n            break;\r\n\r\n\r\n          case \"content\":\r\n\r\n            domElement.textContent = el[ 1 ].content;\r\n\r\n            break;\r\n  \r\n\r\n          default:\r\n\r\n            domElement.setAttribute(prop, el[ 1 ][ prop ]);\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n    if ( Array.isArray( el[ 2 ] ) ) {\r\n\r\n      if ( el[ 2 ].length == 1 ) {\r\n\r\n        el[ 2 ] = [ el[ 2 ] ];\r\n\r\n      }\r\n\r\n      makeElement( el[ 2 ], domElement );\r\n\r\n    }\r\n\r\n  } );\r\n\r\n  return myElementCreated;\r\n\r\n}\r\n  ","import { makeElement } from \"./makeElement.mjs\";\r\n\r\n/**\r\n * @function \r\n * @name modal \r\n * @description Creates a modal windows for information purposes.\r\n * @param { string } message The message to show in the modal.\r\n * @param {function} cb  The callback function to execute when click on Ok button.\r\n * @retuns { void }\r\n */\r\n\r\nexport function modal ( message, cb = () => {} ) {\r\n\r\n  let template = [\r\n    \"div\",\r\n    {\r\n      class: \"modal\",\r\n      style: `position: fixed; \r\n               width: 100%; \r\n               height: 100%;\r\n               display: inline-flex;\r\n               background: transparent;\r\n               align-items: center;\r\n               justify-content: center;\r\n               top: 0;`,\r\n    },\r\n    [\r\n      \"div\",\r\n      {\r\n        style: `background: white;\r\n              color: black;\r\n              padding: 1em;\r\n              box-shadow: 1px 1px 8px 2px rgba(0,0,0,0.3);\r\n              text-align: center;\r\n              max-width: 80%;\r\n              `,\r\n      },\r\n      [\r\n        [\r\n          \"p\",\r\n          {\r\n            content: message,\r\n            style: `\r\n      padding-bottom: 1em;\r\n      `,\r\n          },\r\n        ],\r\n        [\r\n          \"button\",\r\n          {\r\n            content: \"Ok\",\r\n            style: `\r\n      background: #3498db;\r\n      color: white;\r\n      padding: 0.5em 2em;\r\n      border: NONE;\r\n      BORDER-RADIUS: 3PX;\r\n      text-align: center;\r\n      `,\r\n          },\r\n        ],\r\n      ],\r\n    ],\r\n  ];\r\n\r\n  let myModal = makeElement( template );\r\n\r\n  document.getElementsByTagName( \"body\" )[ 0 ].appendChild( myModal );\r\n\r\n  myModal.addEventListener( \"click\", ( e ) => {\r\n\r\n    e.preventDefault();\r\n    e.target.closest( \".modal\" ).remove();\r\n    cb();\r\n\r\n  });\r\n\r\n}\r\n","\r\nimport { CONFIG } from \"./config.mjs\";\r\nimport { modal } from \"../utility/modal.mjs\";\r\n\r\n/**\r\n * @class \r\n * @name LocalStorageInterface\r\n * @Classdesc Communication between Cart and Product Detail. Manage of LocalStorage.\r\n */\r\n\r\n export class LocalStorageInterface {\r\n\r\n  /**\r\n   * @param { string } localCartName The name of the localStorage item.\r\n   * @param { Array.<object> } cartList The list of products added to the cart.\r\n   */\r\n\r\n  constructor( localCartName = CONFIG.LOCAL_CART ) {\r\n\r\n    this.localCartName = localCartName;\r\n    this.cartList = JSON.parse( localStorage.getItem( this.localCartName ) ) || [];  \r\n  \r\n  }\r\n\r\n  /**\r\n   * @method search Look for the index of a product with a given color and id.\r\n   * @param { string } id\r\n   * @param { string } color\r\n   * @returns { number } return the index of the product with the color and id.\r\n   */\r\n  \r\n  search( id, color ) {\r\n\r\n    return this.cartList.findIndex(\r\n\r\n      ( element ) => element.id == id && element.color == color\r\n\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   * @method add Add an item to the cart.\r\n   * @param { string } id The product Id.\r\n   * @param { string } Quantity\r\n   * @param { string } color\r\n   * @returns { Array } cartList - the total list of products in the cart.\r\n   */\r\n\r\n  add ( id, quantity, color ) {\r\n\r\n  const isItemRepeated = this.search( id, color );\r\n\r\n  if ( isItemRepeated === -1 ) {\r\n\r\n    this.cartList.push( { id: id, quantity: quantity, color: color } );\r\n    localStorage.setItem( this.localCartName, JSON.stringify( this.cartList ) );\r\n\r\n  } else {\r\n\r\n    this.cartList[ isItemRepeated ].quantity += parseInt( quantity );\r\n    localStorage.setItem( this.localCartName, JSON.stringify( this.cartList ) );\r\n\r\n  }\r\n\r\n  modal( \"Produit ajouté au panier!\" );\r\n  \r\n  return this.cartList;\r\n\r\n}\r\n  \r\n  /**\r\n  * @method remove Remove an item with a given Id and color.\r\n  * @param { string } id\r\n  * @param { string } color\r\n  * @returns { Array || void } cartList - list of cart items. \r\n  */\r\n  \r\n  remove( id, color ) {\r\n\r\n    let indexObject = this.search( id, color );\r\n  \r\n    if ( indexObject != -1 ) {\r\n\r\n      this.cartList.splice( indexObject, 1 );\r\n\r\n      localStorage.setItem( this.localCartName, JSON.stringify( this.cartList ) );\r\n      return this.cartList;\r\n\r\n    } else {\r\n\r\n      modal( \"Le produit n'a été pas trouvé\" );\r\n\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @method modify Modify the quantity of an item.\r\n   * @param { string } id\r\n   * @param { string } color\r\n   * @param { string } quantity New value of quantity.\r\n   * @returns { void }\r\n   */\r\n  \r\n  modify( id, color, quantity ) {\r\n\r\n    let index = this.search( id, color );\r\n  \r\n    if ( index != -1 ) {\r\n\r\n      let cartItemToModify = this.cartList[ index ];\r\n\r\n      cartItemToModify.quantity = quantity;\r\n      localStorage.setItem( this.localCartName, JSON.stringify( this.cartList ) );\r\n\r\n    } else {\r\n\r\n      modal( \"Erreur: L'objet à modifier n'existe plus\" );\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method reset Reset the list of cart items from the cart and from de localstorage.\r\n   * @returns { void }\r\n   */\r\n\r\n  reset() {\r\n\r\n    localStorage.removeItem( this.localCartName );\r\n    this.cartList = [];\r\n\r\n  }\r\n\r\n  /**\r\n   * @method getProdIdToCommand Get the list of all the Id of the products to command.\r\n   * @returns { Array.< string > } The list of the id.\r\n   */\r\n\r\n  getProdIdToOrder(){\r\n\r\n    let myListToOrder = [];\r\n\r\n    this.cartList.forEach( ( el ) => {\r\n\r\n      myListToOrder.push( el.id );\r\n\r\n    });\r\n\r\n    return myListToOrder;\r\n\r\n  }\r\n\r\n}\r\n  ","\r\nimport { makeElement } from \"../utility/makeElement.mjs\";\r\nimport { Product } from \"./Product.mjs\";\r\n/**\r\n * @class \r\n * @name CartItem\r\n * @classdesc Create an HTMLElement Item of the Cart with a template and manage the item\r\n * @prop { Array.< Array.< string, object, array > > } template Item Cart Template of HTMLElement\r\n */\r\n\r\n export class CartItem extends Product {\r\n\r\n    /**\r\n     * @param { Product } item - Product data.\r\n     */\r\n  \r\n    constructor( prod ) {\r\n\r\n      super( prod );\r\n\r\n      this.color =  prod.color;\r\n      this.quantity = prod.quantity;\r\n\r\n      this.template = \r\n      [\"article\",{ class: \"cart__item\", \"data-id\": this._id, \"data-color\": this.color },[   \r\n            [\"div\", { class: \"cart__item__img\" },\r\n                [\"img\", { src: this.image, alt: this.altTxt }]\r\n            ],\r\n            [\"div\", { class: \"cart__item__content\" },[\r\n              [ \"div\", { class: \"cart__item__content__titlePrice\" },[\r\n                  [\"h2\", { content: this.name }],\r\n                  [\"p\", { content: this.price + \" €\" }]]\r\n              ],\r\n              [\"div\", { class: \"cart__item__content__settings\" }, [\r\n                  [ \"div\", { class: \"cart__item__content__settings__quantity\" }, [\r\n                      [\"p\", { content: \"Qté:\" }],\r\n                      [\"input\", {\r\n                          type: \"number\",\r\n                          class: \"itemQuantity\",\r\n                          name: \"itemQuantity\",\r\n                          min: \"1\",\r\n                          max: \"100\",\r\n                          value: this.quantity,\r\n                        }]]\r\n                  ],\r\n                  [\"div\", { class: \"cart__item__content__settings__delete\" },\r\n                    [\"p\", { class: \"deleteItem\", content: \"Supprimer\" }],\r\n                  ]]\r\n             ]]]]];\r\n        }\r\n\r\n   /**\r\n   * @method render - Create a new element CartItem and render it to the cart.\r\n   * @param { HTMLElement } container - HTMLElemet where to render the cart item.\r\n   * @returns { void }\r\n   */\r\n\r\n  render( container ) {\r\n\r\n    makeElement( this.template, container );\r\n\r\n  }\r\n \r\n}","/**\r\n * @class Superclass\r\n * @name Product\r\n * @classdesc It sets the properties of the products.\r\n * @property { string } _id The Id of the product\r\n * @property { string } image The URL of the image product\r\n * @property { string } altTxt The alternative text of the image product\r\n * @property { number } price The price of the product\r\n * @property { string } description A description of the product\r\n * @property { string } name Name of the product\r\n */\r\n\r\nexport class Product {\r\n\r\n  /**\r\n   * @param { Object } prod The object with the values of the properties.\r\n   */\r\n\r\n  constructor ( prod ) {\r\n\r\n    this._id = prod._id;\r\n\r\n    this.image = prod.image;\r\n\r\n    this.altTxt = prod.altTxt;\r\n\r\n    this.price = prod.price;\r\n\r\n    this.description = prod.description;\r\n\r\n    this.name = prod.name;\r\n\r\n  }\r\n}\r\n","\r\nimport { apiInterface } from \"./apiInterface.mjs\";\r\nimport { LocalStorageInterface } from \"./LocalStorageInterface.mjs\";\r\nimport { CONFIG } from \"./config.mjs\";\r\nimport { CartItem } from \"./CartItem.mjs\";\r\n\r\n/**\r\n * @class\r\n * @name Cart\r\n * @descrition Manage all the cart\r\n */\r\n \r\nexport class Cart {\r\n\r\n  /**\r\n   * @property { Array.<Array> } cartList [private]- The List of Cart Items with localStorage and\r\n   *  the Products data related.\r\n   * @property { int } totalPrice [private] - The total price of the cart to pay.\r\n   * @property { int } totalQuantity [private]- The total quantity of items to command.\r\n   * @property { localCartInterface } localCart LocalStorage manager\r\n   * @property { HTMLElement } container The container of the list of products\r\n   */\r\n\r\n    #cartList = new Array( 0 );\r\n    #totalQuantity = 0; \r\n    #totalPrice = 0;\r\n    container;\r\n \r\n    /**\r\n     * @param { HTMLElement } container The container where to load de items\r\n     * @param { string } cartName the name of the localStorage.\r\n     */\r\n  \r\n    constructor( container, cartName = CONFIG.LOCAL_CART ) {\r\n\r\n      this.container = container;\r\n      this.localCart = new LocalStorageInterface( cartName );\r\n      \r\n    }\r\n  \r\n    /**\r\n     *  @method sumTotalPriceAndQuantity to make adition of the total quantity and price of cart.\r\n     *  @returns { Object: { quantity{ number }, price{ number } } }\r\n     */\r\n  \r\n    sumTotalPriceAndQuantity = function () {\r\n\r\n      if ( this.#cartList === [] ) {\r\n\r\n        this.#totalQuantity = this.#totalPrice = 0;\r\n\r\n      } else {\r\n\r\n        this.#totalQuantity = this.#cartList.reduce(\r\n          ( a, b ) => a + ( parseInt( b.quantity ) || 0),\r\n          0\r\n        );\r\n\r\n        this.#totalPrice = this.#cartList.reduce(\r\n          ( a, b ) => a + ( parseInt( b.quantity ) * parseInt( b.price ) || 0),\r\n          0\r\n        );\r\n      }\r\n\r\n    return { quantity: this.#totalQuantity, price: this.#totalPrice };\r\n\r\n    };\r\n  \r\n    /**\r\n    * @method render Show the cart list on the DOM\r\n    * @returns { void }\r\n    */\r\n  \r\n    async render() {\r\n\r\n      // get Ids of the products of the cart\r\n      let myListOfProducts = this.localCart.getProdIdToOrder();\r\n\r\n      // Load api products\r\n      \r\n      try {\r\n\r\n        let myItemList = await apiInterface.getSomeProducts( myListOfProducts ); \r\n\r\n\r\n        // Render Elements of Cart\r\n        this.localCart.cartList.forEach( ( element ) => {\r\n\r\n          let item = myItemList.find( ( prod ) => element.id === prod._id );\r\n\r\n          let myItemCart = new CartItem ( \r\n            {_id: element.id, \r\n              quantity: element.quantity,\r\n              color: element.color,\r\n              image: item.image,\r\n              name: item.name,\r\n              description: item.description,\r\n              altTxt: item.altTxt,\r\n              price: item.price} \r\n          );\r\n\r\n          this.#cartList.push( myItemCart );\r\n\r\n          myItemCart.render( this.container );\r\n        \r\n        } );\r\n      \r\n       // Show total Price and Quantity\r\n \r\n        return this.sumTotalPriceAndQuantity();\r\n       \r\n      } catch(err) {\r\n          throw new Error (err);\r\n      }\r\n    }\r\n\r\n  \r\n    /**\r\n     * @method modifyQuantity Modify the quantity of a product item on the cart.\r\n     * @param { string } id The ID of the product to modify.\r\n     * @param { string } color The color of the product to modify.\r\n     * @param { string } newValue The new quantity.\r\n     * @returns { Object: { quantity, price } } returns new total price and quantity.\r\n     */\r\n  \r\n    modifyQuantity( id, color, newValue ) {\r\n\r\n      // Modify localStorage\r\n\r\n      this.localCart.modify( id, color, newValue );\r\n\r\n      let index = this.#cartList.findIndex( ( el ) => ( el.id = id ) );\r\n\r\n      if ( index >= 0 ) {\r\n\r\n        this.#cartList[ index ].quantity = newValue;\r\n\r\n      }\r\n\r\n      return this.sumTotalPriceAndQuantity();\r\n\r\n    }\r\n\r\n    /**\r\n     * @method deleteCartItem Deletes an product from the cart\r\n     * @param {string} id The Id of the product to delete\r\n     * @param {string} color The color of the product to delete.\r\n     * @returns {Object} returns un object {quantity, price}\r\n     */\r\n  \r\n    deleteCartItem( id, color ) {\r\n\r\n      // Erasing form localStorage\r\n      this.localCart.remove( id, color );\r\n\r\n      let index = this.#cartList.findIndex(\r\n        ( el ) => ( el._id == id && el.color == color )\r\n      );\r\n  \r\n      if ( index >= 0 ) {\r\n        this.#cartList.splice( index, 1 );\r\n      }\r\n\r\n      return this.sumTotalPriceAndQuantity();\r\n\r\n    }\r\n\r\n  }","import { CONFIG } from \"./config.mjs\";\r\n\r\n/**\r\n * @Object \r\n * @name apiComunication \r\n * @description Api communication manager.\r\n */\r\n\r\nexport const apiInterface = {\r\n\r\n  /**\r\n   * @function getProduct Fetch from API all the products or only one single product.\r\n   * @param { string } id Optional - The Id of the product to fetch. Default is all products.\r\n   * @returns { Array.<object> || object } Return the products or an array of products\r\n   */\r\n\r\n  getProduct: async ( id = \"\" ) => {\r\n \r\n    return await fetch( CONFIG.API_URL + id ).then( \r\n \r\n      ( response ) => {\r\n \r\n        if ( !response.ok ) {\r\n \r\n          throw new Error ( response.status + \": \" + response.statusText );\r\n \r\n        } else {\r\n \r\n          return response.json().then( ( data ) => {\r\n            let listOfProduct;\r\n\r\n            if ( Array.isArray( data ) ){\r\n            \r\n              listOfProduct = [];\r\n              \r\n              data.forEach( ( el ) => {\r\n                listOfProduct.push( {\r\n                  _id: el._id,\r\n                  image: el.imageUrl,\r\n                  altTxt: el.altTxt,\r\n                  price: el.price,\r\n                  description: el.description,\r\n                  name: el.name,\r\n                  colors: el.colors\r\n                } \r\n              );\r\n            });\r\n          } else { \r\n            listOfProduct = {\r\n              _id: data._id,\r\n              image: data.imageUrl,\r\n              altTxt: data.altTxt,\r\n              price: data.price,\r\n              description: data.description,\r\n              name: data.name,\r\n              colors: data.colors\r\n            }}\r\n\r\n            return listOfProduct;\r\n          \r\n          });\r\n \r\n        }\r\n      }\r\n    );\r\n  },\r\n\r\n  /**\r\n   * @method getSomeProducts Returns an array of several products\r\n   * determinated by the ID's list.\r\n   * @param { array.<string> } idList the id of the products to request\r\n   * @returns { array.<object> } returns a list of products objects\r\n   */\r\n\r\n  getSomeProducts: async ( idList ) => {\r\n\r\n    let myGetList = [];\r\n\r\n    for ( let i in idList ) {\r\n    \r\n      myGetList.push(\r\n    \r\n        fetch( CONFIG.API_URL + idList[i] ).then( ( response ) => {\r\n    \r\n          if ( !response.ok ) {\r\n\r\n            throw new Error( response.status + \": \" + response.statusText );\r\n          \r\n          } else {\r\n          \r\n            return response.json();\r\n          \r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    return Promise.all( myGetList )\r\n      .then(\r\n        ( data ) => {\r\n          let listOfProduct = [];\r\n\r\n          data.forEach( ( el ) => {\r\n\r\n            listOfProduct.push( {\r\n              _id: el._id,\r\n              image: el.imageUrl,\r\n              altTxt: el.altTxt,\r\n              price: el.price,\r\n              description: el.description,\r\n              name: el.name,\r\n              colors: el.colors\r\n            } );\r\n\r\n          } )\r\n\r\n          return listOfProduct;\r\n\r\n        } )\r\n      .catch( ( err ) => {\r\n        throw new Error ( err );\r\n      } );\r\n  },\r\n\r\n  /**\r\n   * @function sendOrder Send the command order of products.\r\n   * @param myCommand Object {contact:Array.<string>, list:Array.<string>} \r\n   * @returns { string}  returns the command number.\r\n   */\r\n\r\n  sendOrder: async ( myCommand ) => {\r\n\r\n    return await fetch( CONFIG.API_URL + \"order\", {\r\n\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify( myCommand ),\r\n\r\n    } ).then( \r\n\r\n      ( response ) => { \r\n\r\n      if ( !response.ok ) {\r\n      \r\n        throw new Error( response.status + \": \" + response.statusText );\r\n      \r\n      } else {\r\n      \r\n        return response.json().then( ( data ) => {\r\n          return data.orderId;\r\n        });\r\n      \r\n      }\r\n\r\n    });\r\n  },\r\n};\r\n","\r\n  /**\r\n   * @class \r\n   * @name Contact\r\n   * @classdesc Contains and validate the contact for the command order.\r\n   */\r\n  \r\n   export class Contact {\r\n\r\n    firstName;\r\n    lastName;\r\n    address;\r\n    city;\r\n    email;\r\n  \r\n    /**\r\n     * @method Validate Verify that the input values are correct\r\n     * @param { string } champ The name of the input value ( id )\r\n     * @param { string } value The value of the input\r\n     * @returns { object { champ, result } } Return an object with the input id and\r\n     * if the value is validated, returns true, else returns an error message.\r\n     */\r\n  \r\n    validate( champ, value ) {\r\n\r\n      let re;\r\n      let errorMessage;\r\n  \r\n      switch ( champ ) {\r\n\r\n        case \"firstName\":\r\n\r\n        case \"lastName\":\r\n\r\n          re = /^[A-zÀ-ú' -]*$/;\r\n\r\n          errorMessage =\r\n            'Seulement sont permis les lettres de l\\'alphabet et \".\" et \"-\".';\r\n         \r\n          break;\r\n  \r\n        case \"address\":\r\n\r\n          re = /(^[0-9]{1,} )?[^\\s-][A-zÀ-ú,' \\-.]{2,}/;\r\n\r\n          errorMessage = \"L'adresse doit être une adresse dans le format français valide.\";\r\n\r\n          break;\r\n  \r\n        case \"city\":\r\n\r\n          re = /^([a-zA-Z\\u0080-\\u024F]+(?:. |-| |'))*[a-zA-Z\\u0080-\\u024F]*$/;\r\n\r\n          errorMessage = \"Seulement sont permis les lettres de l\\'alphabet et \\\".-'\\\" sont aussi valides.\";\r\n          \r\n          break;\r\n  \r\n        case \"email\":\r\n\r\n          re = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g;\r\n\r\n          errorMessage = \"Email invalide. Exemple d'email valide: joeDoe@mail.com\";\r\n\r\n          break;\r\n      }\r\n\r\n      let myValidator = new RegExp( re );\r\n  \r\n      if ( myValidator.test( value ) ) {\r\n\r\n        this[ champ ] = value;\r\n        return { champ: champ, result: true };\r\n\r\n      } else {\r\n\r\n        this[ champ ] = false;\r\n        return { champ: champ, result: errorMessage };\r\n\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @method getContact Get the contact data validated\r\n     * @returns { object || false } Returns the contact data if are valid, if not, returns false.\r\n     */\r\n\r\n    getContact() {\r\n\r\n      if (\r\n          this.firstName &&\r\n          this.lastName &&\r\n          this.address &&\r\n          this.city &&\r\n          this.email ) {\r\n\r\n            return {\r\n                firstName: this.firstName,\r\n                lastName: this.lastName,\r\n                address: this.address,\r\n                city: this.city,\r\n                email: this.email\r\n            };\r\n\r\n          } else {\r\n\r\n              return false;\r\n\r\n          }\r\n\r\n    }\r\n  }\r\n  ","import { CONFIG } from \"./app/config.mjs\";\r\nimport { makeElement } from \"./utility/makeElement.mjs\";\r\nimport { modal } from \"./utility/modal.mjs\";\r\nimport { Cart } from \"./app/Cart.js\";\r\nimport { Contact } from \"./app/Contact.mjs\";\r\nimport { LocalStorageInterface } from \"./app/LocalStorageInterface.mjs\";\r\nimport { apiInterface } from \"./app/apiInterface.mjs\";\r\nimport { getURLparam } from \"./utility/utility.mjs\";\r\n\r\n/**\r\n * @class \r\n * @name CartApp \r\n * @classdesc Manage the Cart and Confirmation page\r\n */\r\n\r\nclass CartApp {\r\n\r\n  /**\r\n   * @property { string } localCartName - The name of the localSorage for the cart.\r\n   * @property { HTMLElement } itemCartContainer - Element that contains the list of cart products.\r\n   * @property { HTMLElement } totalQuantity - Element that show the total quantity of products.\r\n   * @property { HTMLElement } totalPrice - Element that show the total price of products.\r\n   * @property { HTMLElement } contactForm - Form to add the contact information.\r\n   * @property { Cart } cart\r\n   * @property { LocalSorageInterface } localCartStorage\r\n   * @property { Contact } contact\r\n   */\r\n\r\n  static localCartName = CONFIG.LOCAL_CART;\r\n  static itemCartContainer = document.getElementById( \"cart__items\" );\r\n  static totalQuantity = document.getElementById( \"totalQuantity\" );\r\n  static totalPrice = document.getElementById( \"totalPrice\" );\r\n  static contactForm = document.getElementsByClassName( \"cart__order__form\" )[ 0 ];\r\n  static cart = new Cart( this.itemCartContainer );\r\n  static localCartStorage = new LocalStorageInterface( this.localCartName );\r\n  static contact = new Contact();\r\n  \r\n  /**\r\n   * @method init static - Initiate the js of the cart/confirmation page\r\n   * @returns { void }\r\n   */\r\n \r\n  static init() {\r\n  \r\n    const orderId = getURLparam( \"command\" );\r\n  \r\n    if ( orderId ) {\r\n  \r\n      document.getElementById( \"orderId\" ).textContent = orderId;\r\n      return;\r\n  \r\n    } else if ( orderId === \"\" ) {\r\n  \r\n      window.location.href = \"./index.html\";\r\n  \r\n    } else {\r\n  \r\n      try {\r\n\r\n        this.load();\r\n\r\n        //Adding event change quantity of product\r\n        this.itemCartContainer.addEventListener( \"change\", ( event ) => {\r\n\r\n          this.modifyCartItem( event );\r\n\r\n        });\r\n\r\n        //Adding event delete product from cart\r\n        this.itemCartContainer.addEventListener( \"click\", ( event ) => {\r\n\r\n          this.removeCartItem( event );\r\n\r\n        });\r\n\r\n        //Adding event change and validate form's inputs\r\n        this.contactForm.addEventListener( \"input\", ( event ) => {\r\n\r\n          event.preventDefault();\r\n\r\n          const validation = this.contact.validate (\r\n            event.target.id,\r\n            event.target.value\r\n          );\r\n\r\n          if ( validation.result === true ) {\r\n\r\n            document.getElementById( validation.champ + \"ErrorMsg\" ).textContent =\"\";\r\n\r\n          } else {\r\n\r\n            document.getElementById( validation.champ + \"ErrorMsg\" ).textContent =\r\n              validation.result;\r\n\r\n          }\r\n\r\n        });\r\n\r\n        //Adding event submit order form\r\n        this.contactForm.addEventListener( \"submit\", async ( event ) => {\r\n\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.submitCart();\r\n\r\n        });\r\n\r\n      } catch ( err ) {\r\n\r\n        modal( \"Desolé, un erreur est survenu. Veuillez réessayer ultérieurement.\" );\r\n        console.log( err );\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * @method load static - Load the carts products items.\r\n   * @returns { void }\r\n   */\r\n\r\n  static async load() {\r\n\r\n    // The cart don't have products to show.\r\n\r\n    if ( this.localCartStorage.cartList.length === 0 ) {\r\n\r\n      this.itemCartContainer.appendChild (\r\n\r\n        makeElement( [\r\n          \"p\",{\r\n            content: \"Votre panier est vide.\",\r\n            style: \"text-align: center; font-size: 2em; padding: 2em;\",}\r\n        ] )\r\n        \r\n      );\r\n\r\n      this.totalQuantity.textContent = 0;\r\n      this.totalPrice.textContent = 0;\r\n\r\n    }\r\n\r\n    // Load the products to show\r\n\r\n    try {\r\n\r\n      let result = await this.cart.render();\r\n\r\n      this.totalQuantity.textContent = result.quantity;\r\n      this.totalPrice.textContent = result.price;\r\n\r\n    } catch ( err ) {\r\n\r\n      modal( \"Desolé, un erreur est survenu. Veuillez réessayer ultérieurement.\" );\r\n      console.log( err );\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * @method modifyCartItem static - Modify the quantity of the cart product\r\n   * @param { EventListenerObject } event - Event Object. \r\n   * @returns { void }\r\n   */\r\n\r\n  static modifyCartItem( event ) {\r\n\r\n    const id = event.target.closest( \"article\" ).getAttribute( \"data-id\" );\r\n    const color = event.target.closest( \"article\" ).getAttribute( \"data-color\" );\r\n    const quantity = parseInt( event.target.value );\r\n\r\n    // Quantity validation\r\n    if ( quantity < 1 ) {\r\n\r\n      modal(\"La quantité à commander ne peut pas être inferieur a 1\");\r\n      return;\r\n\r\n    } else if ( quantity > 100 ) {\r\n\r\n      modal(\"La quantité à commander ne peut pas être superieur a 100\");\r\n      return;\r\n\r\n    }\r\n\r\n    // Change quantity\r\n    let total = this.cart.modifyQuantity( id, color, quantity );\r\n\r\n    // Change new total value and quantity on DOM\r\n    this.totalQuantity.textContent = total.quantity;\r\n    this.totalPrice.textContent = total.price;\r\n\r\n  }\r\n\r\n  /**\r\n   * @method removeCartItem Static - Remove a product element from the cart.\r\n   * @param { EventListenerObject } event \r\n   * @returns { void }\r\n   */\r\n\r\n  static removeCartItem( event ) {\r\n\r\n    if (event.target.classList.contains( \"deleteItem\" )) {\r\n\r\n      const item = event.target.closest( \"article\" );\r\n      const id = item.getAttribute( \"data-id\" );\r\n      const color = item.getAttribute( \"data-color\" );\r\n\r\n      // Erase from localStorage the item\r\n      const total = this.cart.deleteCartItem( id, color );\r\n      item.remove();\r\n\r\n      // Add new price and quantity on DOM\r\n      this.totalQuantity.textContent = total.quantity;\r\n      this.totalPrice.textContent = total.price;\r\n\r\n      // Cart without products after remove.\r\n  \r\n      if ( !this.itemCartContainer.hasChildNodes() ) {\r\n\r\n        this.itemCartContainer.appendChild(\r\n          makeElement( [\r\n            \"p\", { content: \"Votre panier est vide\",\r\n                   style: \"text-align: center; font-size: 2em; padding: 2em;\"}\r\n          ] )\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method submitCart - Add the product to the cart / localStorage.\r\n   * @returns { void }\r\n   */\r\n\r\n  static async submitCart() {\r\n  \r\n    // Get the ID list of products to order\r\n    const listToCommand = this.localCartStorage.getProdIdToOrder();\r\n\r\n    // There are no products in cart.\r\n\r\n    if ( listToCommand.length == 0 ) {\r\n\r\n      modal( \"Vous n'avez pas de produits à commander\", () => {\r\n\r\n        window.location.href = \"./index.html\";\r\n\r\n      } );\r\n\r\n    } else {\r\n      \r\n      // Create Order Object\r\n      const myCommand = {\r\n\r\n        contact: this.contact.getContact(),\r\n        products: listToCommand,\r\n\r\n      };\r\n\r\n      // Send order\r\n      try {\r\n\r\n        let commandNumber = await apiInterface.sendOrder(myCommand);\r\n\r\n        if ( commandNumber ) {\r\n\r\n        // Delete Cart and localStorage.\r\n        this.localCartStorage.reset();\r\n\r\n        window.location.href =\r\n          \"./confirmation.html?command=\" + commandNumber;\r\n\r\n        } else {\r\n\r\n          throw new Error ( \"Order Fail\" );\r\n\r\n        } \r\n\r\n      } catch ( error ) {\r\n        \r\n        modal( \"Desolé, un erreur est survenu. Veuillez réessayer ultérieurement.\"\r\n        );\r\n        console.log( error );\r\n      \r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nwindow.onload = CartApp.init();\r\n","\r\n/**\r\n * @Function\r\n * @name getURLparam\r\n * @description Returns the value of a given parameter of a URL.\r\n * @param { string } param The name of the parameter.\r\n * @returns { string || false } Returns the value if exits, if not returns false.\r\n */\r\n\r\nexport function getURLparam ( param ) {\r\n\r\n    const url = new URL( window.location.href );\r\n\r\n    const search_params = new URLSearchParams( url.search );\r\n\r\n    return ( search_params.has( param ) ) ? search_params.get( param ) || \"\" : false;\r\n\r\n};\r\n\r\n"],"names":["CONFIG","makeElement","template","container","domElement","myElementCreated","forEach","el","document","createElement","appendChild","prop","myListClass","class","Array","isArray","join","classList","add","textContent","content","setAttribute","length","modal","message","cb","myModal","style","getElementsByTagName","addEventListener","e","preventDefault","target","closest","remove","LocalStorageInterface","constructor","localCartName","this","cartList","JSON","parse","localStorage","getItem","search","id","color","findIndex","element","quantity","isItemRepeated","push","setItem","stringify","parseInt","indexObject","splice","modify","index","reset","removeItem","getProdIdToOrder","myListToOrder","CartItem","prod","_id","image","altTxt","price","description","name","super","src","alt","type","min","max","value","render","Cart","cartName","localCart","sumTotalPriceAndQuantity","reduce","a","b","async","myListOfProducts","myItemList","idList","myGetList","i","fetch","then","response","ok","json","Error","status","statusText","Promise","all","data","listOfProduct","imageUrl","colors","catch","err","apiInterface","item","find","myItemCart","modifyQuantity","newValue","deleteCartItem","Contact","firstName","lastName","address","city","email","validate","champ","re","errorMessage","RegExp","test","result","getContact","CartApp","static","getElementById","getElementsByClassName","itemCartContainer","orderId","param","url","URL","window","location","href","search_params","URLSearchParams","has","get","getURLparam","load","event","modifyCartItem","removeCartItem","contactForm","validation","contact","stopPropagation","submitCart","console","log","localCartStorage","totalQuantity","totalPrice","cart","getAttribute","total","contains","hasChildNodes","listToCommand","myCommand","products","commandNumber","method","headers","Accept","body","error","onload","init"],"sourceRoot":""}