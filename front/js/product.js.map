{"version":3,"file":"product.js","mappings":";;;;;;;;;;;;;;;;;;AAAkD;AACZ;AACI;AACG;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,iBAAiB,gBAAgB;AACjC;AACA,iBAAiB,SAAS;AAC1B,iBAAiB,MAAM;AACvB,iBAAiB,qBAAqB;AACtC,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA,qDAAqD,0DAAiB;AACtE;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0CAA0C;AACtE,2BAA2B,0DAAiB;AAC5C,MAAM;AACN;AACA,2BAA2B,0DAAiB;AAC5C;AACA,IAAI,yDAAK;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2EAA4B;AACzD;AACA;AACA;AACA;AACA;AACA,6BAA6B,mDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAiB;AAC5C;AACA,MAAM;AACN,MAAM,yDAAK;AACX;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAiB;AAC5C;AACA,MAAM;AACN,MAAM,yDAAK;AACX;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,4BAA4B,0DAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvMyD;AACjB;AACxC;AACA;AACA;AACA;AACA;AACA,WAAW,4CAA4C;AACvD;AACA;AACO,uBAAuB,iDAAO;AACrC;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oEAAoE;AAC5E;AACA;AACA;AACA,YAAY,0BAA0B;AACtC,oBAAoB,mCAAmC;AACvD;AACA;AACA;AACA,YAAY,8BAA8B;AAC1C;AACA;AACA;AACA,gBAAgB,0CAA0C;AAC1D;AACA,yBAAyB,oBAAoB;AAC7C,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA,gBAAgB,wCAAwC;AACxD;AACA;AACA;AACA,oBAAoB,kDAAkD;AACtE;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,oBAAoB,gDAAgD;AACpE,0BAA0B,2CAA2C;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B,gBAAgB;AAChB;AACA;AACA,IAAI,qEAAW;AACf;AACA;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB;AACA;AACO;AACP;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC9BsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,cAAc,SAAS;AACvB,gBAAgB,2BAA2B;AAC3C;AACA;AACA,uBAAuB,uDAAc;AACrC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,uDAAc;AAC5B;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,GAAG;AACH;AACA;AACA;AACA,8BAA8B;AAC9B,gBAAgB,SAAS;AACzB;AACA;AACA;AACA,uBAAuB,uDAAc;AACrC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA,QAAQ;AACR;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;AACH;;;;;;;;;;;;;;;ACtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA,YAAY,kCAAkC;AAC9C,mBAAmB,0CAA0C;AAC7D,sBAAsB,sBAAsB,YAAY,oBAAoB;AAC5E;AACA,YAAY,cAAc;AAC1B,cAAc,cAAc;AAC5B;AACA;AACA,CAAQ;AACR;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;;;;;;;;;;;;;ACpEgD;AAChD;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACO,wCAAwC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,gBAAgB,6DAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB,cAAc,kBAAkB;AAChC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UClBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNsD;AAChB;AACM;AACQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,sBAAsB,iEAAW;AACjC;AACA;AACA;AACA,MAAM;AACN,MAAM,yDAAK;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,wBAAwB,0EAAuB;AAC/C;AACA,oDAAoD,gBAAgB,SAAS,iBAAiB;AAC9F;AACA;AACA;AACA;AACA;AACA,6DAA6D,GAAG,IAAI,GAAG;AACvE,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,MAAM;AACN;AACA,MAAM,yDAAK;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,yDAAK;AACX;AACA,MAAM;AACN,MAAM,yDAAK;AACX;AACA,MAAM;AACN,MAAM,yDAAK;AACX;AACA;AACA;AACA;AACA;AACA,MAAM,yDAAK;AACX;AACA;AACA;AACA;AACA,uBAAuB,+CAAI;AAC3B;AACA;AACA;AACA;AACA","sources":["webpack://kanap/./src/app/Cart.mjs","webpack://kanap/./src/app/CartItem.mjs","webpack://kanap/./src/app/Product.mjs","webpack://kanap/./src/app/apiInterface.mjs","webpack://kanap/./src/app/config.mjs","webpack://kanap/./src/utility/makeElement.mjs","webpack://kanap/./src/utility/modal.mjs","webpack://kanap/./src/utility/utility.mjs","webpack://kanap/webpack/bootstrap","webpack://kanap/webpack/runtime/define property getters","webpack://kanap/webpack/runtime/hasOwnProperty shorthand","webpack://kanap/webpack/runtime/make namespace object","webpack://kanap/./src/product.js"],"sourcesContent":["import { apiInterface } from \"./apiInterface.mjs\";\r\nimport { CONFIG } from \"./config.mjs\";\r\nimport { CartItem } from \"./CartItem.mjs\";\r\nimport { modal } from \"../utility/modal.mjs\";\r\n\r\n/**\r\n * @class\r\n * @name Cart\r\n * @descrition Manage the cart and localStorage\r\n */\r\n\r\nexport class Cart {\r\n  /**\r\n   * @property { Array.<Array> } cartList [private]- The List of Cart Items with localStorage and\r\n   *  the Products data related.\r\n   * @property { number } totalPrice [private] - The total price of the cart to pay.\r\n   * @property { int } totalQuantity [private]- The total quantity of items to command.\r\n   * @property { localCartInterface } localCart LocalStorage manager\r\n   * @property { HTMLElement } container The container of the list of products\r\n   */\r\n\r\n  #cartList = [];\r\n  #totalQuantity = 0;\r\n  #totalPrice = 0;\r\n  #priceList = [];\r\n  container;\r\n\r\n  /**\r\n   * @param { HTMLElement } container The container where the items are loaded.\r\n   * @param { array.<object> } cartList the list of the cart items.\r\n   */\r\n\r\n  constructor(container) {\r\n    this.container = container;\r\n    this.#cartList = JSON.parse(localStorage.getItem(CONFIG.LOCAL_CART)) || [];\r\n  }\r\n\r\n  /**\r\n   *  @method sumTotalPriceAndQuantity to make adition of the total quantity and price of cart.\r\n   *  @returns { array.<number,number> } returns the total quantity and total price.\r\n   */\r\n\r\n  sumTotalPriceAndQuantity = function () {\r\n    if (this.#cartList === []) {\r\n      this.#totalQuantity = this.#totalPrice = 0;\r\n      this.#priceList = [];\r\n    } else {\r\n      this.#totalQuantity = this.#cartList.reduce(\r\n        (a, b) => a + (parseInt(b.quantity) || 0),\r\n        0\r\n      );\r\n      this.#totalPrice = this.#priceList.reduce(\r\n        (a, b) => a + (parseInt(b.quantity) * parseInt(b.price) || 0),\r\n        0\r\n      );\r\n    }\r\n    return [this.#totalQuantity, this.#totalPrice];\r\n  };\r\n\r\n  /**\r\n   * @method getProdIdToCommand Get the list of all the Id of the products to command.\r\n   * @returns { Array.<string > } The list of the id.\r\n   */\r\n\r\n  getProdIdToOrder() {\r\n    let myListToOrder = [];\r\n    this.#cartList.forEach((el) => {\r\n      myListToOrder.push(el.id);\r\n    });\r\n    return myListToOrder;\r\n  }\r\n\r\n  /**\r\n   * @method add Add an item to the cart.\r\n   * @param { string } id The product Id.\r\n   * @param { string } Quantity\r\n   * @param { string } color\r\n   * @returns { void }\r\n   */\r\n\r\n  add(id, quantity, color) {\r\n    console.log(this.#cartList);\r\n    const isItemRepeated = this.#cartList.findIndex(\r\n      (el) => el.id == id && el.color == color\r\n    );\r\n    console.log(isItemRepeated);\r\n    if (isItemRepeated === -1) {\r\n      this.#cartList.push({ id: id, quantity: quantity, color: color });\r\n      localStorage.setItem(CONFIG.LOCAL_CART, JSON.stringify(this.#cartList));\r\n    } else {\r\n      this.#cartList[isItemRepeated].quantity += parseInt(quantity);\r\n      localStorage.setItem(CONFIG.LOCAL_CART, JSON.stringify(this.#cartList));\r\n    }\r\n    modal(\"Produit ajout√© au panier!\");\r\n  }\r\n\r\n  /**\r\n   * @method render Show the cart list on the DOM\r\n   * @returns { array.<number,number> }\r\n   */\r\n\r\n  async render() {\r\n    // get Ids of the products of the cart\r\n    let myListOfProducts = this.getProdIdToOrder();\r\n\r\n    try {\r\n      let myItemList = await apiInterface.getSomeProducts(myListOfProducts);\r\n\r\n      // Render Elements of Cart\r\n      this.#cartList.forEach((element) => {\r\n        let item = myItemList.find((prod) => element.id === prod._id);\r\n\r\n        let myItemCart = new CartItem({\r\n          _id: element.id,\r\n          quantity: element.quantity,\r\n          color: element.color,\r\n          image: item.image,\r\n          name: item.name,\r\n          description: item.description,\r\n          altTxt: item.altTxt,\r\n          price: item.price,\r\n        });\r\n\r\n        this.#priceList.push({\r\n          id: element.id,\r\n          quantity: element.quantity,\r\n          price: item.price,\r\n        });\r\n        myItemCart.render(this.container);\r\n      });\r\n      return this.sumTotalPriceAndQuantity();\r\n    } catch (err) {\r\n      throw new Error(err);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method modifyQuantity Modify the quantity of a product item on the cart.\r\n   * @param { string } id The ID of the product to modify.\r\n   * @param { string } color The color of the product to modify.\r\n   * @param { string } newValue The new quantity.\r\n   * @returns { array.<number,number> } } returns new total price and quantity.\r\n   */\r\n\r\n  modifyQuantity(id, color, newValue) {\r\n    // Modify localStorage\r\n    let index = this.#cartList.findIndex(\r\n      (el) => el.id == id && el.color == color\r\n    );\r\n    if (index >= 0) {\r\n      this.#priceList[index].quantity = this.#cartList[index].quantity =\r\n        newValue;\r\n      localStorage.setItem(CONFIG.LOCAL_CART, JSON.stringify(this.#cartList));\r\n      return this.sumTotalPriceAndQuantity();\r\n    } else {\r\n      modal(\"Erreur: L'objet √† modifier n'existe plus\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method deleteCartItem Deletes an product from the cart\r\n   * @param {string} id The Id of the product to delete\r\n   * @param {string} color The color of the product to delete.\r\n   * @returns {array.<number,number>} returns un array with the total quantity and total price of the cart.\r\n   */\r\n\r\n  deleteCartItem(id, color) {\r\n    // Erasing form localStorage\r\n    let index = this.#cartList.findIndex(\r\n      (el) => el.id == id && el.color == color\r\n    );\r\n    if (index >= 0) {\r\n      this.#cartList.splice(index, 1);\r\n      this.#priceList.splice(index, 1);\r\n      localStorage.setItem(CONFIG.LOCAL_CART, JSON.stringify(this.#cartList));\r\n      return this.sumTotalPriceAndQuantity();\r\n    } else {\r\n      modal(\"Le produit n'a √©t√© pas trouv√©\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method reset Reset the list of cart items from the cart and from de localstorage.\r\n   * @returns { void }\r\n   */\r\n\r\n  reset() {\r\n    localStorage.removeItem(CONFIG.LOCAL_CART);\r\n    this.#priceList = this.#cartList = [];\r\n  }\r\n\r\n  /**\r\n   * @method isEmpty Indicates if the cart is empty or not.\r\n   * @returns {Boolean} True if empty, false if not.\r\n   */\r\n\r\n  isEmpty() {\r\n    return this.#cartList.length === 0;\r\n  }\r\n}\r\n","import { makeElement } from \"../utility/makeElement.mjs\";\r\nimport { Product } from \"./Product.mjs\";\r\n\r\n/**\r\n * @class\r\n * @name CartItem\r\n * @classdesc Create an HTMLElement Item of the Cart with a template and manage the item\r\n * @prop { Array.< Array.< string, object, array > > } template Item Cart Template of HTMLElement\r\n */\r\n\r\nexport class CartItem extends Product {\r\n  /**\r\n   * @param { Product } item - Product data.\r\n   */\r\n\r\n  constructor(prod) {\r\n    super(prod);\r\n    this.color = prod.color;\r\n    this.quantity = prod.quantity;\r\n    this.template = [\r\n      \"article\",\r\n      { class: \"cart__item\", \"data-id\": this._id, \"data-color\": this.color },\r\n      [\r\n        [\r\n          \"div\",\r\n          { class: \"cart__item__img\" },\r\n          [\"img\", { src: this.image, alt: this.altTxt }],\r\n        ],\r\n        [\r\n          \"div\",\r\n          { class: \"cart__item__content\" },\r\n          [\r\n            [\r\n              \"div\",\r\n              { class: \"cart__item__content__titlePrice\" },\r\n              [\r\n                [\"h2\", { content: this.name }],\r\n                [\"p\", { content: this.price + \" ‚Ç¨\" }],\r\n              ],\r\n            ],\r\n            [\r\n              \"div\",\r\n              { class: \"cart__item__content__settings\" },\r\n              [\r\n                [\r\n                  \"div\",\r\n                  { class: \"cart__item__content__settings__quantity\" },\r\n                  [\r\n                    [\"p\", { content: \"Qt√©:\" }],\r\n                    [\r\n                      \"input\",\r\n                      {\r\n                        type: \"number\",\r\n                        class: \"itemQuantity\",\r\n                        name: \"itemQuantity\",\r\n                        min: \"1\",\r\n                        max: \"100\",\r\n                        value: this.quantity,\r\n                      },\r\n                    ],\r\n                  ],\r\n                ],\r\n                [\r\n                  \"div\",\r\n                  { class: \"cart__item__content__settings__delete\" },\r\n                  [\"p\", { class: \"deleteItem\", content: \"Supprimer\" }],\r\n                ],\r\n              ],\r\n            ],\r\n          ],\r\n        ],\r\n      ],\r\n    ];\r\n  }\r\n  /**\r\n   * @method render - Create a new element CartItem and render it to the cart.\r\n   * @param { HTMLElement } container - HTMLElemet where to render the cart item.\r\n   * @returns { void }\r\n   */\r\n  render(container) {\r\n    makeElement(this.template, container);\r\n  }\r\n}\r\n","/**\r\n * @class Superclass\r\n * @name Product\r\n * @classdesc It sets the properties of the products.\r\n * @property { string } _id The Id of the product\r\n * @property { string } image The URL of the image product\r\n * @property { string } altTxt The alternative text of the image product\r\n * @property { number } price The price of the product\r\n * @property { string } description A description of the product\r\n * @property { string } name Name of the product\r\n */\r\n\r\nexport class Product {\r\n  /**\r\n   * @param { Object } prod The object with the values of the properties.\r\n   */\r\n\r\n  constructor(prod) {\r\n    this._id = prod._id;\r\n\r\n    this.image = prod.image;\r\n\r\n    this.altTxt = prod.altTxt;\r\n\r\n    this.price = +prod.price;\r\n\r\n    this.description = prod.description;\r\n\r\n    this.name = prod.name;\r\n  }\r\n}\r\n","import { CONFIG } from \"./config.mjs\";\r\n\r\n/**\r\n * @Object\r\n * @name apiComunication\r\n * @description Api communication manager.\r\n */\r\n\r\nexport const apiInterface = {\r\n  /**\r\n   * @function getProduct Fetch from API all the products or only one single product.\r\n   * @param { string } id Optional - The Id of the product to fetch. Default is all products.\r\n   * @returns { Array.<object> || object } Return the products or an array of products\r\n   */\r\n  getProduct: async (id = \"\") => {\r\n    return await fetch(CONFIG.API_URL + id).then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(response.status + \": \" + response.statusText);\r\n      } else {\r\n        return response.json().then((data) => {\r\n          let listOfProduct;\r\n          if (Array.isArray(data)) {\r\n            listOfProduct = [];\r\n\r\n            data.forEach((el) => {\r\n              listOfProduct.push({\r\n                _id: el._id,\r\n                image: el.imageUrl,\r\n                altTxt: el.altTxt,\r\n                price: el.price,\r\n                description: el.description,\r\n                name: el.name,\r\n                colors: el.colors,\r\n              });\r\n            });\r\n          } else {\r\n            listOfProduct = {\r\n              _id: data._id,\r\n              image: data.imageUrl,\r\n              altTxt: data.altTxt,\r\n              price: data.price,\r\n              description: data.description,\r\n              name: data.name,\r\n              colors: data.colors,\r\n            };\r\n          }\r\n          return listOfProduct;\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * @method getSomeProducts Returns an array of several products\r\n   * determinated by the ID's list.\r\n   * @param { array.<string> } idList the id of the products to request\r\n   * @returns { array.<object> } returns a list of products objects\r\n   */\r\n\r\n  getSomeProducts: async (idList) => {\r\n    let myGetList = [];\r\n    for (let i in idList) {\r\n      myGetList.push(\r\n        fetch(CONFIG.API_URL + idList[i]).then((response) => {\r\n          if (!response.ok) {\r\n            throw new Error(response.status + \": \" + response.statusText);\r\n          } else {\r\n            return response.json();\r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    return Promise.all(myGetList)\r\n      .then((data) => {\r\n        let listOfProduct = [];\r\n        data.forEach((el) => {\r\n          listOfProduct.push({\r\n            _id: el._id,\r\n            image: el.imageUrl,\r\n            altTxt: el.altTxt,\r\n            price: el.price,\r\n            description: el.description,\r\n            name: el.name,\r\n            colors: el.colors,\r\n          });\r\n        });\r\n        return listOfProduct;\r\n      })\r\n      .catch((err) => {\r\n        throw new Error(err);\r\n      });\r\n  },\r\n\r\n  /**\r\n   * @function sendOrder Send the command order of products.\r\n   * @param myCommand Object {contact:Array.<string>, list:Array.<string>}\r\n   * @returns { string}  returns the command number.\r\n   */\r\n\r\n  sendOrder: async (myCommand) => {\r\n    return await fetch(CONFIG.API_URL + \"order\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(myCommand),\r\n    }).then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(response.status + \": \" + response.statusText);\r\n      } else {\r\n        return response.json().then((data) => {\r\n          return data.orderId;\r\n        });\r\n      }\r\n    });\r\n  },\r\n};\r\n","/* Configuration Data */\r\n/**\r\n * @Object\r\n * @name CONFIG\r\n * @Description Sets de main parameters for all the website.\r\n */\r\n\r\nexport const CONFIG = {\r\n  API_URL: \"http://localhost:3000/api/products/\",\r\n\r\n  PATH_NAME_COMMAND: \"/front/html/confirmation.html\",\r\n\r\n  PATH_PRODUCT: \"./product.html?id=\",\r\n\r\n  LOCAL_CART: \"Kanap\",\r\n};\r\n","/**\r\n * @function \r\n * @name makeElement\r\n * @description create un HTMLElement with a given template.\r\n * @param { Array.< String, ?Object, ?Array } template The object Template.\r\n * @example ['a', {href: 'http:google.es', content: 'google'},\r\n *              ['p',{content: \"mi parrafo\"}, ['span', {content: 'my child'}]]\r\n *          ]\r\n * @param { HTMLElement } container The container where we append the element.\r\n * @returns { HTMLElement } The new element created with the given template.\r\n */\r\n\r\n export function makeElement ( template, container ) {\r\n\r\n  let myElementCreated = container;\r\n\r\n  // If the third element of the array is only one array, then add [] because the third element is really an array of \r\n  // possible childs.\r\n  // Example: {'p', null, ['span']} => {'p', null, [['span']]}\r\n\r\n  if ( typeof template[ 0 ] === \"string\" ) {\r\n    template = [ template ];\r\n  }\r\n\r\n  let domElement;\r\n\r\n  template.forEach( ( el ) => {\r\n    if ( typeof el[ 0 ] === \"string\") {\r\n      domElement = document.createElement( el[ 0 ] );\r\n      if ( myElementCreated ) {\r\n        myElementCreated.appendChild( domElement );\r\n      } else {\r\n        myElementCreated = domElement;\r\n      }\r\n    }\r\n\r\n    if ( typeof el[ 1 ] == \"object\" ) {\r\n      for (let prop in el[ 1 ]) {\r\n        switch ( prop ) {\r\n\r\n          case \"class\":\r\n            let myListClass = el[ 1 ].class;\r\n            if ( Array.isArray( el[ 1 ].class ) ) {\r\n              myListClass = el[ 1 ].class.join(\",\");\r\n            }\r\n            domElement.classList.add( myListClass );\r\n            break;\r\n\r\n          case \"content\":\r\n            domElement.textContent = el[ 1 ].content;\r\n            break;\r\n\r\n          default:\r\n            domElement.setAttribute(prop, el[ 1 ][ prop ]);\r\n        }\r\n      }\r\n    }\r\n\r\n    if ( Array.isArray( el[ 2 ] ) ) {\r\n      if ( el[ 2 ].length == 1 ) {\r\n        el[ 2 ] = [ el[ 2 ] ];\r\n      }\r\n      makeElement( el[ 2 ], domElement );\r\n    }\r\n\r\n  } );\r\n  return myElementCreated;\r\n}\r\n  ","import { makeElement } from \"./makeElement.mjs\";\r\n\r\n/**\r\n * @function \r\n * @name modal \r\n * @description Creates a modal windows for information purposes.\r\n * @param { string } message The message to show in the modal.\r\n * @param {function} cb  The callback function to execute when click on Ok button.\r\n * @retuns { void }\r\n */\r\n\r\nexport function modal ( message, cb = () => {} ) {\r\n\r\n  let template = [\r\n    \"div\",\r\n    {\r\n      class: \"modal\",\r\n      style: `position: fixed; \r\n               width: 100%; \r\n               height: 100%;\r\n               display: inline-flex;\r\n               background: transparent;\r\n               align-items: center;\r\n               justify-content: center;\r\n               top: 0;`,\r\n    },\r\n    [\r\n      \"div\",\r\n      {\r\n        style: `background: white;\r\n              color: black;\r\n              padding: 1em;\r\n              box-shadow: 1px 1px 8px 2px rgba(0,0,0,0.3);\r\n              text-align: center;\r\n              max-width: 80%;\r\n              `,\r\n      },\r\n      [\r\n        [\r\n          \"p\",\r\n          {\r\n            content: message,\r\n            style: `\r\n      padding-bottom: 1em;\r\n      `,\r\n          },\r\n        ],\r\n        [\r\n          \"button\",\r\n          {\r\n            content: \"Ok\",\r\n            style: `\r\n      background: #3498db;\r\n      color: white;\r\n      padding: 0.5em 2em;\r\n      border: NONE;\r\n      BORDER-RADIUS: 3PX;\r\n      text-align: center;\r\n      `,\r\n          },\r\n        ],\r\n      ],\r\n    ],\r\n  ];\r\n  let myModal = makeElement( template );\r\n  document.getElementsByTagName( \"body\" )[ 0 ].appendChild( myModal );\r\n  myModal.addEventListener( \"click\", ( e ) => {\r\n    e.preventDefault();\r\n    e.target.closest( \".modal\" ).remove();\r\n    cb();\r\n  });\r\n}\r\n","\r\n/**\r\n * @Function\r\n * @name getURLparam\r\n * @description Returns the value of a given parameter of a URL.\r\n * @param { string } param The name of the parameter.\r\n * @returns { string || false } Returns the value if exits, if not returns false.\r\n */\r\n\r\nexport function getURLparam ( param ) {\r\n\r\n    const url = new URL( window.location.href );\r\n\r\n    const search_params = new URLSearchParams( url.search );\r\n\r\n    return ( search_params.has( param ) ) ? search_params.get( param ) || \"\" : false;\r\n\r\n};\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { apiInterface } from \"./app/apiInterface.mjs\";\r\nimport { Cart } from \"./app/Cart.mjs\";\r\nimport { modal } from \"./utility/modal.mjs\";\r\nimport { getURLparam } from \"./utility/utility.mjs\";\r\n\r\n/**\r\n * @class ProductApp\r\n * @description Manage the logic of the Product Detail page.\r\n */\r\n\r\nclass ProductApp {\r\n  /**\r\n   * @property { Object } container - All HTMLElements to output information.\r\n   * @property { Object } item - Product to load by ID.\r\n   */\r\n\r\n  static container = {\r\n    image: document.querySelector(\".item__img\"),\r\n    name: document.getElementById(\"title\"),\r\n    price: document.getElementById(\"price\"),\r\n    description: document.getElementById(\"description\"),\r\n    colors: document.getElementById(\"colors\"),\r\n    quantity: document.getElementById(\"quantity\"),\r\n  };\r\n  static item;\r\n\r\n  /**\r\n   * @method init Static - Initializate de js of product detail page.\r\n   * @returns { void }\r\n   */\r\n\r\n  static init() {\r\n    /* Check if there is an Product Id */\r\n    const idProduct = getURLparam(\"id\");\r\n\r\n    if (idProduct) {\r\n      this.load(idProduct);\r\n    } else {\r\n      modal(\r\n        \"Le produit n'a pas √©t√© sp√©cifi√©. Veuillez choisir un produit\",\r\n        () => {\r\n          window.location.href = \"./index.html\";\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method load static Load the product data\r\n   * @param { string } idProduct The id number of the product passed on the URL.\r\n   * @returns { void }\r\n   */\r\n\r\n  static async load(idProduct) {\r\n    try {\r\n      /* Loading Product from api */\r\n      this.item = await apiInterface.getProduct(idProduct);\r\n      /* Adding information to page */\r\n      this.container.image.innerHTML = `<img src=\"${this.item.image}\" alt=\"${this.item.altTxt}\">`;\r\n      this.container.name.textContent = this.item.name;\r\n      this.container.price.textContent = this.item.price;\r\n      this.container.description.textContent = this.item.description;\r\n      this.container.quantity.value = 1;\r\n      this.item.colors.forEach((el) => {\r\n        this.container.colors.innerHTML += `<option value=\"${el}\">${el}</option>`;\r\n      });\r\n      // Event submit form\r\n      document\r\n        .getElementById(\"addToCart\")\r\n        .addEventListener(\"click\", (event) => {\r\n          event.preventDefault();\r\n          this.submit();\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n      modal(\r\n        \"Desol√©, un erreur est survenu. Veuillez r√©essayer ult√©rieurement\",\r\n        () => {\r\n          window.location.href = \"./index.html\";\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method submit Check entries and submit product to localStorage cart.\r\n   * @returns {void}\r\n   */\r\n\r\n  static submit() {\r\n    const quantity = parseInt(this.container.quantity.value);\r\n\r\n    // Quantity validation\r\n    if (!quantity) {\r\n      modal(\"Veuillez indiquer la quantit√© √† commander\");\r\n      return;\r\n    } else if (quantity < 1) {\r\n      modal(\"La quantit√© √† commander ne peut pas √™tre inferieur a 1\");\r\n      return;\r\n    } else if (quantity > 100) {\r\n      modal(\"La quantit√© √† commander ne peut pas √™tre superieur a 100\");\r\n      return;\r\n    }\r\n\r\n    // Color validation\r\n    if (!this.container.colors.value) {\r\n      modal(\"Vous devez choisir une couleur\");\r\n      return;\r\n    }\r\n\r\n    // Adding product to Cart\r\n    const myCart = new Cart();\r\n    myCart.add(this.item._id, quantity, this.container.colors.value);\r\n  }\r\n}\r\n\r\nwindow.onload = ProductApp.init();\r\n"],"names":[],"sourceRoot":""}