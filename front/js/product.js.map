{"version":3,"file":"product.js","mappings":"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","sources":["webpack://kanap/./src/utility/makeElement.mjs","webpack://kanap/./src/utility/modal.mjs","webpack://kanap/./src/app/LocalStorageInterface.mjs","webpack://kanap/./src/app/config.mjs","webpack://kanap/./src/product.js","webpack://kanap/./src/utility/utility.mjs","webpack://kanap/./src/app/apiInterface.mjs"],"sourcesContent":["/**\r\n * @function \r\n * @name makeElement\r\n * @description create un HTMLElement with a given template.\r\n * @param { Array.< String, ?Object, ?Array } template The object Template.\r\n * @example ['a', {href: 'http:google.es', content: 'google'},\r\n *              ['p',{content: \"mi parrafo\"}, ['span', {content: 'my child'}]]\r\n *          ]\r\n * @param { HTMLElement } container The container where we append the element.\r\n * @returns { HTMLElement } The new element created with the given template.\r\n */\r\n\r\n export function makeElement ( template, container ) {\r\n\r\n  let myElementCreated = container;\r\n\r\n  // If the third element of the array is only one array, then add [] because the third element is really an array of \r\n  // possible childs.\r\n  // Example: {'p', null, ['span']} => {'p', null, [['span']]}\r\n\r\n  if ( typeof template[ 0 ] === \"string\" ) {\r\n\r\n    template = [ template ];\r\n\r\n  }\r\n\r\n  let domElement;\r\n\r\n  template.forEach( ( el ) => {\r\n\r\n    if ( typeof el[ 0 ] === \"string\") {\r\n\r\n      domElement = document.createElement( el[ 0 ] );\r\n\r\n      if ( myElementCreated ) {\r\n\r\n        myElementCreated.appendChild( domElement );\r\n      \r\n      } else {\r\n\r\n        myElementCreated = domElement;\r\n\r\n      }\r\n\r\n    }\r\n\r\n    if ( typeof el[ 1 ] == \"object\" ) {\r\n\r\n      for (let prop in el[ 1 ]) {\r\n  \r\n        switch ( prop ) {\r\n\r\n          case \"class\":\r\n\r\n            let myListClass = el[ 1 ].class;\r\n\r\n            if ( Array.isArray( el[ 1 ].class ) ) {\r\n\r\n              myListClass = el[ 1 ].class.join(\",\");\r\n\r\n            }\r\n\r\n            domElement.classList.add( myListClass );\r\n\r\n            break;\r\n\r\n\r\n          case \"content\":\r\n\r\n            domElement.textContent = el[ 1 ].content;\r\n\r\n            break;\r\n  \r\n\r\n          default:\r\n\r\n            domElement.setAttribute(prop, el[ 1 ][ prop ]);\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n    if ( Array.isArray( el[ 2 ] ) ) {\r\n\r\n      if ( el[ 2 ].length == 1 ) {\r\n\r\n        el[ 2 ] = [ el[ 2 ] ];\r\n\r\n      }\r\n\r\n      makeElement( el[ 2 ], domElement );\r\n\r\n    }\r\n\r\n  } );\r\n\r\n  return myElementCreated;\r\n\r\n}\r\n  ","import { makeElement } from \"./makeElement.mjs\";\r\n\r\n/**\r\n * @function \r\n * @name modal \r\n * @description Creates a modal windows for information purposes.\r\n * @param { string } message The message to show in the modal.\r\n * @param {function} cb  The callback function to execute when click on Ok button.\r\n * @retuns { void }\r\n */\r\n\r\nexport function modal ( message, cb = () => {} ) {\r\n\r\n  let template = [\r\n    \"div\",\r\n    {\r\n      class: \"modal\",\r\n      style: `position: fixed; \r\n               width: 100%; \r\n               height: 100%;\r\n               display: inline-flex;\r\n               background: transparent;\r\n               align-items: center;\r\n               justify-content: center;\r\n               top: 0;`,\r\n    },\r\n    [\r\n      \"div\",\r\n      {\r\n        style: `background: white;\r\n              color: black;\r\n              padding: 1em;\r\n              box-shadow: 1px 1px 8px 2px rgba(0,0,0,0.3);\r\n              text-align: center;\r\n              max-width: 80%;\r\n              `,\r\n      },\r\n      [\r\n        [\r\n          \"p\",\r\n          {\r\n            content: message,\r\n            style: `\r\n      padding-bottom: 1em;\r\n      `,\r\n          },\r\n        ],\r\n        [\r\n          \"button\",\r\n          {\r\n            content: \"Ok\",\r\n            style: `\r\n      background: #3498db;\r\n      color: white;\r\n      padding: 0.5em 2em;\r\n      border: NONE;\r\n      BORDER-RADIUS: 3PX;\r\n      text-align: center;\r\n      `,\r\n          },\r\n        ],\r\n      ],\r\n    ],\r\n  ];\r\n\r\n  let myModal = makeElement( template );\r\n\r\n  document.getElementsByTagName( \"body\" )[ 0 ].appendChild( myModal );\r\n\r\n  myModal.addEventListener( \"click\", ( e ) => {\r\n\r\n    e.preventDefault();\r\n    e.target.closest( \".modal\" ).remove();\r\n    cb();\r\n\r\n  });\r\n\r\n}\r\n","\r\nimport { CONFIG } from \"./config.mjs\";\r\nimport { modal } from \"../utility/modal.mjs\";\r\n\r\n/**\r\n * @class \r\n * @name LocalStorageInterface\r\n * @Classdesc Communication between Cart and Product Detail. Manage of LocalStorage.\r\n */\r\n\r\n export class LocalStorageInterface {\r\n\r\n  /**\r\n   * @param { string } localCartName The name of the localStorage item.\r\n   * @param { Array.<object> } cartList The list of products added to the cart.\r\n   */\r\n\r\n  constructor( localCartName = CONFIG.LOCAL_CART ) {\r\n\r\n    this.localCartName = localCartName;\r\n    this.cartList = JSON.parse( localStorage.getItem( this.localCartName ) ) || [];  \r\n  \r\n  }\r\n\r\n  /**\r\n   * @method search Look for the index of a product with a given color and id.\r\n   * @param { string } id\r\n   * @param { string } color\r\n   * @returns { number } return the index of the product with the color and id.\r\n   */\r\n  \r\n  search( id, color ) {\r\n\r\n    return this.cartList.findIndex(\r\n\r\n      ( element ) => element.id == id && element.color == color\r\n\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   * @method add Add an item to the cart.\r\n   * @param { string } id The product Id.\r\n   * @param { string } Quantity\r\n   * @param { string } color\r\n   * @returns { Array } cartList - the total list of products in the cart.\r\n   */\r\n\r\n  add ( id, quantity, color ) {\r\n\r\n  const isItemRepeated = this.search( id, color );\r\n\r\n  if ( isItemRepeated === -1 ) {\r\n\r\n    this.cartList.push( { id: id, quantity: quantity, color: color } );\r\n    localStorage.setItem( this.localCartName, JSON.stringify( this.cartList ) );\r\n\r\n  } else {\r\n\r\n    this.cartList[ isItemRepeated ].quantity += parseInt( quantity );\r\n    localStorage.setItem( this.localCartName, JSON.stringify( this.cartList ) );\r\n\r\n  }\r\n\r\n  modal( \"Produit ajouté au panier!\" );\r\n  \r\n  return this.cartList;\r\n\r\n}\r\n  \r\n  /**\r\n  * @method remove Remove an item with a given Id and color.\r\n  * @param { string } id\r\n  * @param { string } color\r\n  * @returns { Array || void } cartList - list of cart items. \r\n  */\r\n  \r\n  remove( id, color ) {\r\n\r\n    let indexObject = this.search( id, color );\r\n  \r\n    if ( indexObject != -1 ) {\r\n\r\n      this.cartList.splice( indexObject, 1 );\r\n\r\n      localStorage.setItem( this.localCartName, JSON.stringify( this.cartList ) );\r\n      return this.cartList;\r\n\r\n    } else {\r\n\r\n      modal( \"Le produit n'a été pas trouvé\" );\r\n\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @method modify Modify the quantity of an item.\r\n   * @param { string } id\r\n   * @param { string } color\r\n   * @param { string } quantity New value of quantity.\r\n   * @returns { void }\r\n   */\r\n  \r\n  modify( id, color, quantity ) {\r\n\r\n    let index = this.search( id, color );\r\n  \r\n    if ( index != -1 ) {\r\n\r\n      let cartItemToModify = this.cartList[ index ];\r\n\r\n      cartItemToModify.quantity = quantity;\r\n      localStorage.setItem( this.localCartName, JSON.stringify( this.cartList ) );\r\n\r\n    } else {\r\n\r\n      modal( \"Erreur: L'objet à modifier n'existe plus\" );\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method reset Reset the list of cart items from the cart and from de localstorage.\r\n   * @returns { void }\r\n   */\r\n\r\n  reset() {\r\n\r\n    localStorage.removeItem( this.localCartName );\r\n    this.cartList = [];\r\n\r\n  }\r\n\r\n  /**\r\n   * @method getProdIdToCommand Get the list of all the Id of the products to command.\r\n   * @returns { Array.< string > } The list of the id.\r\n   */\r\n\r\n  getProdIdToOrder(){\r\n\r\n    let myListToOrder = [];\r\n\r\n    this.cartList.forEach( ( el ) => {\r\n\r\n      myListToOrder.push( el.id );\r\n\r\n    });\r\n\r\n    return myListToOrder;\r\n\r\n  }\r\n\r\n}\r\n  ","/* Configuration Data */\r\n/**\r\n * @Object \r\n * @name CONFIG\r\n * @Description Sets de main parameters for all the website.\r\n */\r\n\r\n export const CONFIG = {\r\n\r\n    API_URL: \"http://localhost:3000/api/products/\",\r\n\r\n    PATH_NAME_COMMAND: \"/front/html/confirmation.html\",\r\n\r\n    PATH_PRODUCT: \"./product.html?id=\",\r\n\r\n    LOCAL_CART: \"Kanap\"\r\n\r\n  };\r\n  ","import { apiInterface } from \"./app/apiInterface.mjs\";\r\nimport { LocalStorageInterface } from \"./app/LocalStorageInterface.mjs\";\r\nimport { modal } from \"./utility/modal.mjs\";\r\nimport { getURLparam } from \"./utility/utility.mjs\";\r\n\r\n\r\n/**\r\n * @class ProductApp\r\n * @description Manage the logic of the Product Detail page.\r\n */\r\n\r\nclass ProductApp {\r\n\r\n  /**\r\n   * @property { Object } container - All HTMLElements to output information.\r\n   * @property { Object } item - Product to load by ID.\r\n   */\r\n\r\n  static container = {\r\n    image: document.querySelector( \".item__img\" ),\r\n    name: document.getElementById( \"title\" ),\r\n    price: document.getElementById( \"price\" ),\r\n    description: document.getElementById( \"description\" ),\r\n    colors: document.getElementById( \"colors\" ),\r\n    quantity: document.getElementById( \"quantity\" ),\r\n  };\r\n\r\n  static item;\r\n\r\n  /**\r\n   * @method init Static - Initializate de js of page.\r\n   * @returns { void }\r\n   */\r\n\r\n  static init() {\r\n\r\n    /* Check if there is an Product Id */\r\n    const idProduct = getURLparam( \"id\" );\r\n    \r\n    if ( idProduct ) {\r\n\r\n      this.load( idProduct );\r\n\r\n    } else {\r\n      \r\n      modal( \"Le produit n'a pas été spécifié. Veuillez choisir un produit\",\r\n             () => { window.location.href = \"./index.html\"; }\r\n      );\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method load static Load the product data\r\n   * @param { string } idProduct The id number of the product passed on the URL. \r\n   * @returns { void }\r\n   */\r\n\r\n  static async load( idProduct ) {\r\n\r\n    try {\r\n\r\n      /* Loading Product from api */\r\n      this.item = await apiInterface.getProduct( idProduct );\r\n\r\n      /* Adding information to page */\r\n      this.container.image.innerHTML = `<img src=\"${ this.item.image }\" alt=\"${ this.item.altTxt }\">`;\r\n      this.container.name.textContent = this.item.name;\r\n      this.container.price.textContent = this.item.price;\r\n      this.container.description.textContent = this.item.description;\r\n      this.container.quantity.value = 1;\r\n\r\n      this.item.colors.forEach( ( el ) => {\r\n        this.container.colors.innerHTML += `<option value=\"${ el }\">${ el }</option>`;\r\n      });\r\n\r\n      // Event submit form\r\n      document.getElementById( \"addToCart\" ).addEventListener( \"click\", ( event ) => {\r\n        event.preventDefault(); \r\n        this.submit();\r\n      } );\r\n\r\n    } catch ( error ) {\r\n      \r\n      console.log( error );\r\n\r\n      modal(\r\n        \"Desolé, un erreur est survenu. Veuillez réessayer ultérieurement\",\r\n        () => { window.location.href = \"./index.html\"; }\r\n      );\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * @method submit Check entries and submit product to localStorage cart.\r\n   * @returns {void}\r\n   */\r\n\r\n  static submit() {\r\n\r\n      const quantity = parseInt( this.container.quantity.value );\r\n\r\n      if ( quantity < 1 ) {\r\n\r\n        modal( \"La quantité à commander ne peut pas être inferieur a 1\" );\r\n        return;\r\n\r\n      } else if ( quantity > 100 ) {\r\n\r\n        modal( \"La quantité à commander ne peut pas être superieur a 100\" );\r\n        return;\r\n\r\n      }\r\n\r\n      if ( !this.container.colors.value ) {\r\n\r\n        modal( \"Vous devez choisir une couleur\" );\r\n        return;\r\n    \r\n      }\r\n\r\n      // Adding product to Cart\r\n      const myCart = new LocalStorageInterface();\r\n\r\n      myCart.add( this.item._id, quantity, this.container.colors.value );\r\n\r\n  }\r\n  \r\n}\r\n\r\nwindow.onload = ProductApp.init();\r\n","\r\n/**\r\n * @Function\r\n * @name getURLparam\r\n * @description Returns the value of a given parameter of a URL.\r\n * @param { string } param The name of the parameter.\r\n * @returns { string || false } Returns the value if exits, if not returns false.\r\n */\r\n\r\nexport function getURLparam ( param ) {\r\n\r\n    const url = new URL( window.location.href );\r\n\r\n    const search_params = new URLSearchParams( url.search );\r\n\r\n    return ( search_params.has( param ) ) ? search_params.get( param ) || \"\" : false;\r\n\r\n};\r\n\r\n","import { CONFIG } from \"./config.mjs\";\r\n\r\n/**\r\n * @Object \r\n * @name apiComunication \r\n * @description Api communication manager.\r\n */\r\n\r\nexport const apiInterface = {\r\n\r\n  /**\r\n   * @function getProduct Fetch from API all the products or only one single product.\r\n   * @param { string } id Optional - The Id of the product to fetch. Default is all products.\r\n   * @returns { Array.<object> || object } Return the products or an array of products\r\n   */\r\n\r\n  getProduct: async ( id = \"\" ) => {\r\n \r\n    return await fetch( CONFIG.API_URL + id ).then( \r\n \r\n      ( response ) => {\r\n \r\n        if ( !response.ok ) {\r\n \r\n          throw new Error ( response.status + \": \" + response.statusText );\r\n \r\n        } else {\r\n \r\n          return response.json().then( ( data ) => {\r\n            let listOfProduct;\r\n\r\n            if ( Array.isArray( data ) ){\r\n            \r\n              listOfProduct = [];\r\n              \r\n              data.forEach( ( el ) => {\r\n                listOfProduct.push( {\r\n                  _id: el._id,\r\n                  image: el.imageUrl,\r\n                  altTxt: el.altTxt,\r\n                  price: el.price,\r\n                  description: el.description,\r\n                  name: el.name,\r\n                  colors: el.colors\r\n                } \r\n              );\r\n            });\r\n          } else { \r\n            listOfProduct = {\r\n              _id: data._id,\r\n              image: data.imageUrl,\r\n              altTxt: data.altTxt,\r\n              price: data.price,\r\n              description: data.description,\r\n              name: data.name,\r\n              colors: data.colors\r\n            }}\r\n\r\n            return listOfProduct;\r\n          \r\n          });\r\n \r\n        }\r\n      }\r\n    );\r\n  },\r\n\r\n  /**\r\n   * @method getSomeProducts Returns an array of several products\r\n   * determinated by the ID's list.\r\n   * @param { array.<string> } idList the id of the products to request\r\n   * @returns { array.<object> } returns a list of products objects\r\n   */\r\n\r\n  getSomeProducts: async ( idList ) => {\r\n\r\n    let myGetList = [];\r\n\r\n    for ( let i in idList ) {\r\n    \r\n      myGetList.push(\r\n    \r\n        fetch( CONFIG.API_URL + idList[i] ).then( ( response ) => {\r\n    \r\n          if ( !response.ok ) {\r\n\r\n            throw new Error( response.status + \": \" + response.statusText );\r\n          \r\n          } else {\r\n          \r\n            return response.json();\r\n          \r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    return Promise.all( myGetList )\r\n      .then(\r\n        ( data ) => {\r\n          let listOfProduct = [];\r\n\r\n          data.forEach( ( el ) => {\r\n\r\n            listOfProduct.push( {\r\n              _id: el._id,\r\n              image: el.imageUrl,\r\n              altTxt: el.altTxt,\r\n              price: el.price,\r\n              description: el.description,\r\n              name: el.name,\r\n              colors: el.colors\r\n            } );\r\n\r\n          } )\r\n\r\n          return listOfProduct;\r\n\r\n        } )\r\n      .catch( ( err ) => {\r\n        throw new Error ( err );\r\n      } );\r\n  },\r\n\r\n  /**\r\n   * @function sendOrder Send the command order of products.\r\n   * @param myCommand Object {contact:Array.<string>, list:Array.<string>} \r\n   * @returns { string}  returns the command number.\r\n   */\r\n\r\n  sendOrder: async ( myCommand ) => {\r\n\r\n    return await fetch( CONFIG.API_URL + \"order\", {\r\n\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify( myCommand ),\r\n\r\n    } ).then( \r\n\r\n      ( response ) => { \r\n\r\n      if ( !response.ok ) {\r\n      \r\n        throw new Error( response.status + \": \" + response.statusText );\r\n      \r\n      } else {\r\n      \r\n        return response.json().then( ( data ) => {\r\n          return data.orderId;\r\n        });\r\n      \r\n      }\r\n\r\n    });\r\n  },\r\n};\r\n"],"names":["makeElement","template","container","domElement","myElementCreated","forEach","el","document","createElement","appendChild","prop","myListClass","class","Array","isArray","join","classList","add","textContent","content","setAttribute","length","modal","message","cb","myModal","style","getElementsByTagName","addEventListener","e","preventDefault","target","closest","remove","LocalStorageInterface","constructor","localCartName","this","cartList","JSON","parse","localStorage","getItem","search","id","color","findIndex","element","quantity","isItemRepeated","push","setItem","stringify","parseInt","indexObject","splice","modify","index","reset","removeItem","getProdIdToOrder","myListToOrder","ProductApp","static","image","querySelector","name","getElementById","price","description","colors","idProduct","param","url","URL","window","location","href","search_params","URLSearchParams","has","get","getURLparam","load","item","async","fetch","then","response","ok","json","data","listOfProduct","_id","imageUrl","altTxt","Error","status","statusText","apiInterface","innerHTML","value","event","submit","error","console","log","onload","init"],"sourceRoot":""}