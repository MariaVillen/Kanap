{"version":3,"file":"script.js","mappings":"mBAYQ,SAASA,EAAcC,EAAUC,GAEvC,IAYIC,EAZAC,EAAmBF,EAkFvB,MA5E8B,iBAAlBD,EAAU,KAEpBA,EAAW,CAAEA,IAMfA,EAASI,SAAWC,IAkBlB,GAhBwB,iBAAZA,EAAI,KAEdH,EAAaI,SAASC,cAAeF,EAAI,IAEpCF,EAEHA,EAAiBK,YAAaN,GAI9BC,EAAmBD,GAMA,iBAAXG,EAAI,GAEd,IAAK,IAAII,KAAQJ,EAAI,GAEnB,OAASI,GAEP,IAAK,QAEH,IAAIC,EAAcL,EAAI,GAAIM,MAErBC,MAAMC,QAASR,EAAI,GAAIM,SAE1BD,EAAcL,EAAI,GAAIM,MAAMG,KAAK,MAInCZ,EAAWa,UAAUC,IAAKN,GAE1B,MAGF,IAAK,UAEHR,EAAWe,YAAcZ,EAAI,GAAIa,QAEjC,MAGF,QAEEhB,EAAWiB,aAAaV,EAAMJ,EAAI,GAAKI,IAM1CG,MAAMC,QAASR,EAAI,MAEC,GAAlBA,EAAI,GAAIe,SAEXf,EAAI,GAAM,CAAEA,EAAI,KAIlBN,EAAaM,EAAI,GAAKH,OAMnBC,ECtFF,MAAMkB,UCEN,MAMLC,YAAcC,GAEZC,KAAKC,IAAMF,EAAKE,IAEhBD,KAAKE,MAAQH,EAAKG,MAElBF,KAAKG,OAASJ,EAAKI,OAEnBH,KAAKI,MAAQL,EAAKK,MAElBJ,KAAKK,YAAcN,EAAKM,YAExBL,KAAKM,KAAOP,EAAKO,ODdnBR,YAAaC,GAEXQ,MAAOR,GAUTS,OAAQ/B,GAEN,OAAOF,EAEL,CACE,IACA,CAAEkC,KErBQ,qBFqBoBT,KAAKC,KACnC,CACE,UACA,KACA,CACE,CAAE,MAAO,CAAES,IAAKV,KAAKE,MAAOS,IAAKX,KAAKG,SACtC,CAAE,KAAM,CAAEhB,MAAO,cAAeO,QAASM,KAAKM,OAC9C,CAAE,IAAK,CAAEnB,MAAO,qBAAsBO,QAASM,KAAKK,iBAK1D5B,IG3CNmC,OAAOC,QAAS,ICOT,MAEHC,KAAO,GAMThB,YAAarB,EAAYK,SAASiC,eAAgB,UAEhDf,KAAKvB,UAAYA,EASnBuC,aAEE,UCfUA,OAAQC,EAAK,WAEVC,MHTJ,sCGS4BD,GAAKE,MAEtCC,IAEA,GAAMA,EAASC,GAMb,OAAOD,EAASE,OAAOH,MAAQI,IAC7B,IAAIC,EA6BJ,OA3BKpC,MAAMC,QAASkC,IAElBC,EAAgB,GAEhBD,EAAK3C,SAAWC,IACd2C,EAAcC,KAAM,CAClBxB,IAAKpB,EAAGoB,IACRC,MAAOrB,EAAG6C,SACVvB,OAAQtB,EAAGsB,OACXC,MAAOvB,EAAGuB,MACVC,YAAaxB,EAAGwB,YAChBC,KAAMzB,EAAGyB,KACTqB,OAAQ9C,EAAG8C,aAKjBH,EAAgB,CACdvB,IAAKsB,EAAKtB,IACVC,MAAOqB,EAAKG,SACZvB,OAAQoB,EAAKpB,OACbC,MAAOmB,EAAKnB,MACZC,YAAakB,EAAKlB,YAClBC,KAAMiB,EAAKjB,KACXqB,OAAQJ,EAAKI,QAGRH,KAlCT,MAAM,IAAII,MAAQR,EAASS,OAAS,KAAOT,EAASU,eDSvCC,IAEZnD,SAAWC,IAEC,IAAIgB,EAEjB,CAACI,IAAKpB,EAAGoB,IACTC,MAAOrB,EAAGqB,MACVC,OAAQtB,EAAGsB,OACXG,KAAMzB,EAAGyB,KACTD,YAAaxB,EAAGwB,YAChBD,MAAOvB,EAAGuB,QAIHI,OAAQR,KAAKvB,cAIxB,MAAQuD,GAENzD,EAEE,CACE,MAAO,CAAE0D,MAAO,uBAChB,CAAE,IAAK,CACDvC,QAAS,yFAC4BsC,IACrCC,MAAO,yBAKjBjC,KAAKvB,eD/DqByD,Q","sources":["webpack://kanap/./src/utility/makeElement.mjs","webpack://kanap/./src/app/ProductItem.mjs","webpack://kanap/./src/app/Product.mjs","webpack://kanap/./src/app/config.mjs","webpack://kanap/./src/script.js","webpack://kanap/./src/app/ProductList.mjs","webpack://kanap/./src/app/apiInterface.mjs"],"sourcesContent":["/**\r\n * @function \r\n * @name makeElement\r\n * @description create un HTMLElement with a given template.\r\n * @param { Array.< String, ?Object, ?Array } template The object Template.\r\n * @example ['a', {href: 'http:google.es', content: 'google'},\r\n *              ['p',{content: \"mi parrafo\"}, ['span', {content: 'my child'}]]\r\n *          ]\r\n * @param { HTMLElement } container The container where we append the element.\r\n * @returns { HTMLElement } The new element created with the given template.\r\n */\r\n\r\n export function makeElement ( template, container ) {\r\n\r\n  let myElementCreated = container;\r\n\r\n  // If the third element of the array is only one array, then add [] because the third element is really an array of \r\n  // possible childs.\r\n  // Example: {'p', null, ['span']} => {'p', null, [['span']]}\r\n\r\n  if ( typeof template[ 0 ] === \"string\" ) {\r\n\r\n    template = [ template ];\r\n\r\n  }\r\n\r\n  let domElement;\r\n\r\n  template.forEach( ( el ) => {\r\n\r\n    if ( typeof el[ 0 ] === \"string\") {\r\n\r\n      domElement = document.createElement( el[ 0 ] );\r\n\r\n      if ( myElementCreated ) {\r\n\r\n        myElementCreated.appendChild( domElement );\r\n      \r\n      } else {\r\n\r\n        myElementCreated = domElement;\r\n\r\n      }\r\n\r\n    }\r\n\r\n    if ( typeof el[ 1 ] == \"object\" ) {\r\n\r\n      for (let prop in el[ 1 ]) {\r\n  \r\n        switch ( prop ) {\r\n\r\n          case \"class\":\r\n\r\n            let myListClass = el[ 1 ].class;\r\n\r\n            if ( Array.isArray( el[ 1 ].class ) ) {\r\n\r\n              myListClass = el[ 1 ].class.join(\",\");\r\n\r\n            }\r\n\r\n            domElement.classList.add( myListClass );\r\n\r\n            break;\r\n\r\n\r\n          case \"content\":\r\n\r\n            domElement.textContent = el[ 1 ].content;\r\n\r\n            break;\r\n  \r\n\r\n          default:\r\n\r\n            domElement.setAttribute(prop, el[ 1 ][ prop ]);\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n    if ( Array.isArray( el[ 2 ] ) ) {\r\n\r\n      if ( el[ 2 ].length == 1 ) {\r\n\r\n        el[ 2 ] = [ el[ 2 ] ];\r\n\r\n      }\r\n\r\n      makeElement( el[ 2 ], domElement );\r\n\r\n    }\r\n\r\n  } );\r\n\r\n  return myElementCreated;\r\n\r\n}\r\n  ","import { Product } from \"./Product.mjs\";\r\nimport { makeElement } from \"../utility/makeElement.mjs\";\r\nimport { CONFIG } from \"./config.mjs\";\r\n\r\n/**\r\n * @class Subclass from Product - Create an only item of List Product from index page.\r\n * @name ProductItem\r\n * @classdesc Rends the products items to de DOM\r\n */\r\n\r\nexport class ProductItem extends Product {\r\n\r\n  /** \r\n   * @param { Object } prod The object with the product properties.\r\n   */\r\n\r\n  constructor( prod ) {\r\n\r\n    super( prod );\r\n\r\n  }\r\n\r\n  /**\r\n   * @method render Create a DOM Element to show de products on the list of index.\r\n   * @param { HTMLElement } container\r\n   * @returns { HTMLElement } \r\n   */\r\n\r\n  render( container ) {\r\n\r\n    return makeElement(\r\n\r\n      [\r\n        \"a\",\r\n        { href: CONFIG.PATH_PRODUCT + this._id },\r\n        [\r\n          \"article\",\r\n          null,\r\n          [\r\n            [ \"img\", { src: this.image, alt: this.altTxt } ],\r\n            [ \"h3\", { class: \"productName\", content: this.name } ],\r\n            [ \"p\", { class: \"productDescription\", content: this.description } ],\r\n          ],\r\n        ],\r\n      ],\r\n\r\n      container\r\n\r\n    );\r\n\r\n  }\r\n\r\n}","/**\r\n * @class Superclass\r\n * @name Product\r\n * @classdesc It sets the properties of the products.\r\n * @property { string } _id The Id of the product\r\n * @property { string } image The URL of the image product\r\n * @property { string } altTxt The alternative text of the image product\r\n * @property { number } price The price of the product\r\n * @property { string } description A description of the product\r\n * @property { string } name Name of the product\r\n */\r\n\r\nexport class Product {\r\n\r\n  /**\r\n   * @param { Object } prod The object with the values of the properties.\r\n   */\r\n\r\n  constructor ( prod ) {\r\n\r\n    this._id = prod._id;\r\n\r\n    this.image = prod.image;\r\n\r\n    this.altTxt = prod.altTxt;\r\n\r\n    this.price = prod.price;\r\n\r\n    this.description = prod.description;\r\n\r\n    this.name = prod.name;\r\n\r\n  }\r\n}\r\n","/* Configuration Data */\r\n/**\r\n * @Object \r\n * @name CONFIG\r\n * @Description Sets de main parameters for all the website.\r\n */\r\n\r\n export const CONFIG = {\r\n\r\n    API_URL: \"http://localhost:3000/api/products/\",\r\n\r\n    PATH_NAME_COMMAND: \"/front/html/confirmation.html\",\r\n\r\n    PATH_PRODUCT: \"./product.html?id=\",\r\n\r\n    LOCAL_CART: \"Kanap\"\r\n\r\n  };\r\n  ","import { ProductList } from \"./app/ProductList.mjs\";\r\n\r\n\r\nwindow.onload = new ProductList().load();","import { makeElement } from \"../utility/makeElement.mjs\";\r\nimport { apiInterface } from \"./apiInterface.mjs\";\r\nimport { ProductItem } from \"./ProductItem.mjs\";\r\n\r\n/**\r\n * @class\r\n * @name ProductList\r\n * @classdesc Show the List of Products on the Index page\r\n */\r\n\r\nexport class ProductList {\r\n\r\n    list = [];\r\n\r\n  /** \r\n   * @param { HTMLElement } container The Dom Element where we render the list. \r\n   */\r\n\r\n  constructor( container = document.getElementById( \"items\" ) ) {\r\n\r\n    this.container = container;\r\n\r\n  }\r\n\r\n  /**\r\n   * @method load Show the list in the DOM.\r\n   * @returns { void }\r\n   */\r\n\r\n  async load() {\r\n\r\n    try {\r\n\r\n      let data = await apiInterface.getProduct();\r\n      \r\n      data.forEach( ( el ) => {\r\n\r\n        let prodItem = new ProductItem(\r\n    \r\n          {_id: el._id,\r\n          image: el.image,\r\n          altTxt: el.altTxt,\r\n          name: el.name,\r\n          description: el.description,\r\n          price: el.price}\r\n\r\n        );\r\n\r\n        prodItem.render( this.container );\r\n\r\n      });\r\n    \r\n    } catch ( error ) {\r\n    \r\n        makeElement (\r\n        \r\n          [\r\n            \"div\", { style: \"text-align: center;\" },\r\n            [ \"p\", {\r\n                  content: `Desolé, un erreur est survenu. \r\n                  Veuillez réessayer ultérieurement: ${error}`,\r\n                  style: \"text-align: center;\",\r\n              },\r\n            ],\r\n          ],\r\n\r\n        this.container\r\n        \r\n      );\r\n    }\r\n  }\r\n}\r\n","import { CONFIG } from \"./config.mjs\";\r\n\r\n/**\r\n * @Object \r\n * @name apiComunication \r\n * @description Api communication manager.\r\n */\r\n\r\nexport const apiInterface = {\r\n\r\n  /**\r\n   * @function getProduct Fetch from API all the products or only one single product.\r\n   * @param { string } id Optional - The Id of the product to fetch. Default is all products.\r\n   * @returns { Array.<object> || object } Return the products or an array of products\r\n   */\r\n\r\n  getProduct: async ( id = \"\" ) => {\r\n \r\n    return await fetch( CONFIG.API_URL + id ).then( \r\n \r\n      ( response ) => {\r\n \r\n        if ( !response.ok ) {\r\n \r\n          throw new Error ( response.status + \": \" + response.statusText );\r\n \r\n        } else {\r\n \r\n          return response.json().then( ( data ) => {\r\n            let listOfProduct;\r\n\r\n            if ( Array.isArray( data ) ){\r\n            \r\n              listOfProduct = [];\r\n              \r\n              data.forEach( ( el ) => {\r\n                listOfProduct.push( {\r\n                  _id: el._id,\r\n                  image: el.imageUrl,\r\n                  altTxt: el.altTxt,\r\n                  price: el.price,\r\n                  description: el.description,\r\n                  name: el.name,\r\n                  colors: el.colors\r\n                } \r\n              );\r\n            });\r\n          } else { \r\n            listOfProduct = {\r\n              _id: data._id,\r\n              image: data.imageUrl,\r\n              altTxt: data.altTxt,\r\n              price: data.price,\r\n              description: data.description,\r\n              name: data.name,\r\n              colors: data.colors\r\n            }}\r\n\r\n            return listOfProduct;\r\n          \r\n          });\r\n \r\n        }\r\n      }\r\n    );\r\n  },\r\n\r\n  /**\r\n   * @method getSomeProducts Returns an array of several products\r\n   * determinated by the ID's list.\r\n   * @param { array.<string> } idList the id of the products to request\r\n   * @returns { array.<object> } returns a list of products objects\r\n   */\r\n\r\n  getSomeProducts: async ( idList ) => {\r\n\r\n    let myGetList = [];\r\n\r\n    for ( let i in idList ) {\r\n    \r\n      myGetList.push(\r\n    \r\n        fetch( CONFIG.API_URL + idList[i] ).then( ( response ) => {\r\n    \r\n          if ( !response.ok ) {\r\n\r\n            throw new Error( response.status + \": \" + response.statusText );\r\n          \r\n          } else {\r\n          \r\n            return response.json();\r\n          \r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    return Promise.all( myGetList )\r\n      .then(\r\n        ( data ) => {\r\n          let listOfProduct = [];\r\n\r\n          data.forEach( ( el ) => {\r\n\r\n            listOfProduct.push( {\r\n              _id: el._id,\r\n              image: el.imageUrl,\r\n              altTxt: el.altTxt,\r\n              price: el.price,\r\n              description: el.description,\r\n              name: el.name,\r\n              colors: el.colors\r\n            } );\r\n\r\n          } )\r\n\r\n          return listOfProduct;\r\n\r\n        } )\r\n      .catch( ( err ) => {\r\n        throw new Error ( err );\r\n      } );\r\n  },\r\n\r\n  /**\r\n   * @function sendOrder Send the command order of products.\r\n   * @param myCommand Object {contact:Array.<string>, list:Array.<string>} \r\n   * @returns { string}  returns the command number.\r\n   */\r\n\r\n  sendOrder: async ( myCommand ) => {\r\n\r\n    return await fetch( CONFIG.API_URL + \"order\", {\r\n\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify( myCommand ),\r\n\r\n    } ).then( \r\n\r\n      ( response ) => { \r\n\r\n      if ( !response.ok ) {\r\n      \r\n        throw new Error( response.status + \": \" + response.statusText );\r\n      \r\n      } else {\r\n      \r\n        return response.json().then( ( data ) => {\r\n          return data.orderId;\r\n        });\r\n      \r\n      }\r\n\r\n    });\r\n  },\r\n};\r\n"],"names":["makeElement","template","container","domElement","myElementCreated","forEach","el","document","createElement","appendChild","prop","myListClass","class","Array","isArray","join","classList","add","textContent","content","setAttribute","length","ProductItem","constructor","prod","this","_id","image","altTxt","price","description","name","super","render","href","src","alt","window","onload","list","getElementById","async","id","fetch","then","response","ok","json","data","listOfProduct","push","imageUrl","colors","Error","status","statusText","apiInterface","error","style","load"],"sourceRoot":""}